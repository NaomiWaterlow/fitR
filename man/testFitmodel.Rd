% Generated by roxygen2 (4.0.1): do not edit by hand
\name{testFitmodel}
\alias{testFitmodel}
\title{Test a fitmodel}
\usage{
testFitmodel(fitmodel, theta, state.init, data = NULL, verbose = TRUE)
}
\arguments{
\item{fitmodel}{a \code{\link{fitmodel}} object}

\item{theta}{named numeric vector. Values of the parameters. Names should match \code{fitmodel$theta.names}.}

\item{state.init}{named numeric vector. Initial values of the state variables. Names should match \code{fitmodel$state.names}.}

\item{data}{data frame. Observation times and observed data. The time column must be named \code{time}, whereas the name of the data column should match the one used in the function \code{fitmodel$pointLogLike}.}

\item{verbose}{if \code{TRUE}, print details of the test performed to check validity of the arguments}
}
\description{
This function performs a serie of checks on the \code{\link{fitmodel}} provided by the user in order to make sure that it will be compatible both with the functions coded during the course and the functions
available in the \code{fitR} package. The latters can be used as a correction.
}
\examples{
# create a simple stochastic SIR model with constant population size

SIR_name <- "SIR with constant population size"
SIR_state.names <- c("S","I","R")
SIR_theta.names <- c("R0","D")

SIR_simulateDeterministic <- function(theta,state.init,times) {

        SIR_ode <- function(time, state, parameters) {

                ## parameters
                beta <- parameters[["R0"]] / parameters[["D"]]
                nu <- 1 / parameters[["D"]]

                ## states
                S <- state[["S"]]
                I <- state[["I"]]
                R <- state[["R"]]

                N <- S + I + R

                dS <- -beta * S * I/N
                dI <- beta * S * I/N - nu * I
                dR <- nu * I

                return(list(c(dS, dI, dR)))
        }

	trajectory <- data.frame(ode(y=state.init,times=times,func=SIR_ode,parms=theta, method = "ode45"))

	return(trajectory)
}

## function to compute log-prior
SIR_logPrior <- function(theta) {

        ## uniform prior on R0: U[1,100]
        log.prior.R0 <- dunif(theta[["R0"]], min = 1, max = 100, log = TRUE)
        ## uniform prior on infectious period: U[0,30]
        log.prior.D <- dunif(theta[["D"]], min = 0, max = 30, log = TRUE)

	return(log.prior.R0 + log.prior.D)
}

## function to compute the log-likelihood of one data point
SIR_pointLogLike <- function(data.point, model.point, theta){

        ## the prevalence is observed through a Poisson process with a reporting rate
	return(dpois(x=data.point[["obs"]], lambda=model.point[["I"]], log=TRUE))
}

## function to generate observation from a model simulation
SIR_genObsPoint <- function(model.point, theta){

        ## the prevalence is observed through a Poisson process
        obs.point <- rpois(n=1, lambda=model.point[["I"]])

        return(obs.point)
}

## create deterministic SIR fitmodel
SIR <- fitmodel(
	name=SIR_name,
        state.names=SIR_state.names,
	theta.names=SIR_theta.names,
        simulate=SIR_simulateDeterministic,
	genObsPoint=SIR_genObsPoint,
	logPrior=SIR_logPrior,
	pointLogLike=SIR_pointLogLike)

## test them
theta <- c(R0=3, D=4)
state.init <- c(S=99,I=1,R=0)

data(epi)

## SIR
## testFitmodel(fitmodel=SIR, theta=theta, state.init=state.init, data= epi1, verbose=TRUE)

}
\seealso{
\code{\link{fitmodel}}
}

