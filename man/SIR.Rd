% Generated by roxygen2 (4.0.1): do not edit by hand
\docType{data}
\name{SIR}
\alias{SIR}
\title{The SIR model}
\format{\preformatted{List of 7
 $ name        : chr "SIR with constant population size"
 $ state.names : chr [1:3] "S" "I" "R"
 $ theta.names : chr [1:2] "R0" "D.inf"
 $ simulate    :function (theta, init.state, times)  
  ..- attr(*, "srcref")=Class 'srcref'  atomic [1:8] 241 31 266 2 38 9 241 266
  .. .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x7fc53122ac38> 
 $ genObsPoint :function (model.point, theta)  
  ..- attr(*, "srcref")=Class 'srcref'  atomic [1:8] 287 21 293 2 28 9 287 293
  .. .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x7fc53122ac38> 
 $ logPrior    :function (theta)  
  ..- attr(*, "srcref")=Class 'srcref'  atomic [1:8] 269 18 277 2 25 9 269 277
  .. .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x7fc53122ac38> 
 $ pointLogLike:function (data.point, model.point, theta)  
  ..- attr(*, "srcref")=Class 'srcref'  atomic [1:8] 280 22 284 2 29 9 280 284
  .. .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x7fc53122ac38> 
 - attr(*, "class")= chr "fitmodel"
}}
\usage{
example(SIR)
}
\description{
To get the SIR model, type \code{example(SIR)}. This executes the
code listed below under "Examples".
}
\examples{
# create a simple deterministic SIR model with constant population size

SIR_name <- "SIR with constant population size"
SIR_state.names <- c("S","I","R")
SIR_theta.names <- c("R0","D.inf")

SIR_simulateDeterministic <- function(theta,init.state,times) {

        SIR_ode <- function(time, state, parameters) {

                ## parameters
                beta <- parameters[["R0"]] / parameters[["D.inf"]]
                nu <- 1 / parameters[["D.inf"]]

                ## states
                S <- state[["S"]]
                I <- state[["I"]]
                R <- state[["R"]]

                N <- S + I + R

                dS <- -beta * S * I/N
                dI <- beta * S * I/N - nu * I
                dR <- nu * I

                return(list(c(dS, dI, dR)))
        }

	trajectory <- data.frame(ode(y=init.state,times=times,func=SIR_ode,parms=theta, method = "ode45"))

	return(trajectory)
}

## function to compute log-prior
SIR_logPrior <- function(theta) {

        ## uniform prior on R0: U[1,100]
        log.prior.R0 <- dunif(theta[["R0"]], min = 1, max = 100, log = TRUE)
        ## uniform prior on infectious period: U[0,30]
        log.prior.D <- dunif(theta[["D.inf"]], min = 0, max = 30, log = TRUE)

	return(log.prior.R0 + log.prior.D)
}

## function to compute the log-likelihood of one data point
SIR_pointLogLike <- function(data.point, model.point, theta){

        ## the prevalence is observed through a Poisson process
	return(dpois(x=data.point[["obs"]], lambda=model.point[["I"]], log=TRUE))
}

## function to generate observation from a model simulation
SIR_genObsPoint <- function(model.point, theta){

        ## the prevalence is observed through a Poisson process
        obs.point <- rpois(n=1, lambda=model.point[["I"]])

        return(obs.point)
}

## create deterministic SIR fitmodel
SIR <- fitmodel(
	name=SIR_name,
        state.names=SIR_state.names,
	theta.names=SIR_theta.names,
        simulate=SIR_simulateDeterministic,
	genObsPoint=SIR_genObsPoint,
	logPrior=SIR_logPrior,
	pointLogLike=SIR_pointLogLike)

## test them
theta <- c(R0 = 3, D.inf = 2)
init.state <- c(S = 999, I = 1, R = 0)
data(epi)

## SIR
## testFitmodel(fitmodel=SIR, theta=theta, init.state=init.state, data= epi1, verbose=TRUE)

}
\seealso{
\code{\link{fitmodel}}
}
\keyword{datasets}

